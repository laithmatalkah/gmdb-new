package com.galvanize.gmdb.gmdb.controllers;

import com.galvanize.gmdb.gmdb.model.Movie;
import com.galvanize.gmdb.gmdb.service.MovieService;
import org.hamcrest.collection.IsIterableContainingInOrder;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mockito;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.*;

@RunWith(SpringRunner.class)
@SpringBootTest
public class MovieControllerTests {


    MovieService movieServiceMock = Mockito.mock(MovieService.class);

    // Stories for this project are shown below in order of value, with the highest value listed first.
    // This microservice will contain the CRUD operations required to interact with the GMDB movie database.
    // Other functionality (e.g. user authentication) is hosted in other microservices.
    //
    // 1. As a user
    //    I can GET a list of movies from GMDB that includes Movie ID | Movie Title | Year Released | Genre | Runtime
    //    so that I can see the list of available movies.
    //
    // 2. As a user
    //    I can provide a movie ID and get back the record shown in story 1, plus a list of reviews that contains ReviewController ID | Movie ID | Reviewer ID | ReviewController Text | DateTime last modified
    //    so that I can read the reviews for a movie.
    //
    // 3. As a user
    //    I can provide a Reviewer ID and get back a record that contains Reivewer ID | Username | Date Joined | Number of Reviews
    //    so that I can see details about a particular reviewer.
    //
    // 4. As a user
    //    I can register as a reviewer by providing my Username. (Reviewer ID should be autogenerated)
    //    So that I can start reviewing movies.
    //
    // 5. As a reviewer
    //    I can post a review by providing my reviewer ID, a movie ID and my review text. (ReviewController ID should be autogenerated)
    //    So that I can share my opinions with others.
    //
    // 6. As a reviewer
    //    I can delete a review by providing my reviewer ID and a review ID
    //    So that I can remove reviews I no longer wish to share.
    //
    // 7. As a reviewer
    //    I can update a review by providing my reviewer ID, a movie ID and my review text.
    //    So that I can modify the opinion I'm sharing with others.
    //
    // 8. As an Admin
    //    I can add a new movie to the database by providing the data listed in story 1 (Movie ID should be autogenerated)
    //    so that I can share new movies with the users.
    // 9. As an Admin
    //    I can add update the entry for a movie by providing the data listed in Story 1.
    //    so that I can correct errors in previously uploaded movie entries.
    //
    //10. As an admin
    //    I can delete a movie by providing a movie ID
    //    so that I can remove movies I no longer wish to share.
    //
    //11. As an admin
    //    I can impersonate a reviewer and do any of the things they can do
    //    so that I can help confused reviewers.


    // 1. As a user
    //    I can GET a list of movies from GMDB that includes Movie ID | Movie Title | Year Released | Genre | Runtime
    //    so that I can see the list of available movies.
    @Test

    public void testGetMovies() {

        // setup
        List<Movie> expected = new ArrayList<Movie>() {{
            add(new Movie(1L, "Test Title1", "1986", "Test Genre1", 2L, null));
            add(new Movie(2L, "Test Title2", "1987", "Test Genre2", 2L, null));
            add(new Movie(3L, "Test Title3", "1988", "Test Genre3", 2L, null));
            add(new Movie(4L, "Test Title4", "1989", "Test Genre4", 2L, null));
            add(new Movie(5L, "Test Title5", "1990", "Test Genre5", 2L, null));
        }};

        MovieController movieController = new MovieController(movieServiceMock);

        when(movieServiceMock.getMovies()).thenReturn(expected);

        // exercise

        List<Movie> actual = movieController.getMovies();

        // assert

        Assert.assertThat(actual,
                IsIterableContainingInOrder.contains(expected.toArray()));
        //assertEquals(expected, actual);
        //assertTrue(true);


    }

    @Test
    public void getMovieTest() {

        //setup
        Movie expected = new Movie(1L, "Test Title1", "1986", "Test Genre1", 2L, null);

        MovieController movieController = new MovieController(movieServiceMock);

        when(movieServiceMock.getMovie(1L)).thenReturn(expected);

        //exercise
        Movie actual = movieController.getMovie(1L);

        //assert
        assertEquals(actual, expected);

    }

    @Test
    public void addMovieTest() {

        //setup
        Movie expected = new Movie(1L, "Test Title1", "1986", "Test Genre1", 2L, null);
        MovieController movieController = new MovieController(movieServiceMock);

        //exercise
        movieController.addMovie(expected);

        // verify(dependency, times(1)).yourMethod()
        verify(movieServiceMock, times(1)).addMovie(expected);
    }

    @Test
    public void deleteMovieTest() {

        //setup
        MovieController movieController = new MovieController(movieServiceMock);

        //exercise
        movieController.deleteMovie(1L);

        // verify(dependency, times(1)).yourMethod()
        verify(movieServiceMock, times(1)).deleteMovie(1L);
    }

    @Test
    public void updateMovieTest() {

        //setup
        Movie movie = new Movie(1L, "Test Title1", "1986", "Test Genre1", 2L, null);
        MovieController movieController = new MovieController(movieServiceMock);

        //exercise
        movieController.updateMovie(movie);

        // verify(dependency, times(1)).yourMethod()
        verify(movieServiceMock, times(1)).updateMovie(movie);
    }


}


